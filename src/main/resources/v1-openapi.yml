openapi: "3.0.3"
info:
  description: "Posts API for optimistic.ninja"
  version: "0.0.1"
  title: "optimistic.ninja posts API"
  contact:
    email: "j@optimistic.ninja"
servers:
  - url: "{scheme}://{host}:{port}/v1"
    variables:
      scheme:
        enum:
          - http
          - https
        default: https
      host:
        enum:
          - localhost
          - optimistic.ninja
        default: localhost
        description: Environment
      port:
        enum:
          - "443"
          - "8443"
        default: "8443"
tags:
  - name: posts
paths:
  /posts:
    get:
      tags:
        - posts
      summary: get posts
      description: get posts
      operationId: getPosts
      parameters:
        - description: page offset
          explode: false
          in: query
          name: page
          required: false
          schema:
            format: int64
            type: integer
            minimum: 0
          style: form
          example: 0
        - description: page size
          explode: false
          in: query
          name: size
          required: false
          schema:
            format: int64
            type: integer
            minimum: 0
            maximum: 100
          style: form
          example: 50
        - description: query
          explode: false
          in: query
          name: query
          required: false
          schema:
            type: string
            minLength: 1
          style: form
          example: DD-WRT
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPostsResponse'
          description: a paged list of users
    post:
      tags:
        - posts
      security:
        - auth0:
            - posts:l:w
            - posts:g:w
      summary: create post
      description: create post
      operationId: createPost
      requestBody:
        $ref: "#/components/requestBodies/CreatePost"
      responses:
        201:
          description: created
          headers:
            Location:
              description: the location of the created post
              example: /v1/posts/046b6c7f-0b8a-43b9-b35d-6489e6daee91
              schema:
                format: uri
                type: string
        400:
          description: bad request
        401:
          description: unauthorized
        403:
          description: forbidden
  /posts/{postId}:
    get:
      tags:
        - posts
      summary: get post
      description: get post
      operationId: getPost
      parameters:
        - explode: false
          in: path
          name: postId
          required: true
          schema:
            format: uuid
            type: string
          description: post ID
          example: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: a post
    patch:
      security:
        - auth0:
            - posts:l:w
            - posts:g:w
      tags:
        - posts
      summary: update post
      description: update a pser
      operationId: updatePost
      parameters:
        - explode: false
          in: path
          name: postId
          required: true
          schema:
            format: uuid
            type: string
          description: post ID
          example: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      requestBody:
        $ref: "#/components/requestBodies/UpdatePost"
      responses:
        204:
          description: no content
        400:
          description: bad request
        401:
          description: unauthorized
        403:
          description: forbidden
    delete:
      security:
        - auth0:
            - posts:l:w
            - posts:g:w
      tags:
        - posts
      summary: delete post
      description: delete a post
      operationId: deletePost
      parameters:
        - explode: false
          in: path
          name: postId
          required: true
          schema:
            format: uuid
            type: string
          description: post ID
          example: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      responses:
        204:
          description: no content
components:
  securitySchemes:
    auth0:
      type: oauth2
      description: This API uses OAuth2 with the authorization code flow via Auth0.
      flows:
        authorizationCode:
          authorizationUrl: https://dev-q47yvlx5.us.auth0.com/authorize?audience=https://localhost:8443/v1
          tokenUrl: https://dev-q47yvlx5.us.auth0.com/oauth/token
          scopes:
            posts:l:w: modify own posts
            posts:g:w: modify all posts
  schemas:
    Post:
      properties:
        id:
          description: post id
          format: uuid
          type: string
          example: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        authorId:
          description: author id
          type: string
          example: auth0|6192e1f238dad1006f2e4ce9
          maxLength: 255
        created:
          description: date-time of post creation
          format: date-time
          type: string
        updated:
          description: date-time of last post update
          format: date-time
          type: string
        title:
          description: post title
          type: string
          example: Harden your router with DD-WRT
          minLength: 1
          maxLength: 100
        summary:
          description: post summary
          type: string
          example: Configure firewall, Pihole, WireGuard and other services on DD-WRT
          minLength: 1
          maxLength: 200
        markdown:
          description: post markdown
          type: string
          example: "# This is an H1"
          minLength: 1
        imageUrl:
          description: image url
          type: string
          format: uri
          example: https://optimistic.ninja/logo.png
    ListPostsResponse:
      properties:
        posts:
          description: list of posts
          items:
            $ref: "#/components/schemas/Post"
          type: array
        nextPage:
          description: next page
          format: int64
          type: integer
          minimum: 1
        pageCount:
          description: number of pages
          format: int64
          type: integer
          minimum: 1
      required:
        - posts
        - pageCount
    CreatePostRequest:
      properties:
        title:
          description: post title
          type: string
          example: Harden your router with DD-WRT
          minLength: 1
          maxLength: 100
        summary:
          description: post summary
          type: string
          example: Configure firewall, Pihole, WireGuard and other services on DD-WRT
          minLength: 1
          maxLength: 200
        markdown:
          description: post markdown
          type: string
          example: "# This is an H1"
          minLength: 1
        imageUrl:
          description: image url
          type: string
          format: uri
          example: https://optimistic.ninja/logo.png
      required:
        - title
        - summary
        - markdown
        - imageUrl
    PostUpdateMask:
      description: update mask for a post
      type: string
      enum:
        - TITLE
        - SUMMARY
        - MARKDOWN
        - IMAGE_URL
    UpdatePostRequest:
      description: update post request
      type: object
      required:
        - updateMask
      properties:
        title:
          description: post title
          type: string
          example: Harden your router with DD-WRT
          minLength: 1
          maxLength: 100
        summary:
          description: post summary
          type: string
          example: Configure firewall, Pihole, WireGuard and other services on DD-WRT
          minLength: 1
          maxLength: 200
        markdown:
          description: post markdown
          type: string
          example: "# This is an H1"
          minLength: 1
        imageUrl:
          description: image url
          type: string
          format: uri
          example: https://optimistic.ninja/logo.png
        updateMask:
          type: array
          items:
            $ref: "#/components/schemas/PostUpdateMask"
  requestBodies:
    CreatePost:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreatePostRequest"
    UpdatePost:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdatePostRequest"