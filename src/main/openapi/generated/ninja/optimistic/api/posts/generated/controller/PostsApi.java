/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package ninja.optimistic.api.posts.generated.controller;

import java.util.Optional;
import java.util.UUID;

import javax.validation.Valid;
import javax.validation.constraints.*;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import ninja.optimistic.api.posts.generated.model.CreatePostRequest;
import ninja.optimistic.api.posts.generated.model.ListPostsResponse;
import ninja.optimistic.api.posts.generated.model.Post;
import ninja.optimistic.api.posts.generated.model.UpdatePostRequest;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "Posts", description = "the Posts API")
public interface PostsApi {

  /**
   * POST /posts : create post create post
   *
   * @param createPostRequest (required)
   * @return created (status code 201) or bad request (status code 400) or unauthorized (status code
   *     401) or forbidden (status code 403)
   */
  @ApiOperation(
      value = "create post",
      nickname = "createPost",
      notes = "create post",
      authorizations = {
        @Authorization(
            value = "auth0",
            scopes = {
              @AuthorizationScope(scope = "posts:l:w", description = "modify own posts"),
              @AuthorizationScope(scope = "posts:g:w", description = "modify all posts")
            })
      },
      tags = {
        "posts",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 201, message = "created"),
        @ApiResponse(code = 400, message = "bad request"),
        @ApiResponse(code = 401, message = "unauthorized"),
        @ApiResponse(code = 403, message = "forbidden")
      })
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/posts",
      consumes = {"application/json"})
  default Mono<ResponseEntity<Void>> createPost(
      @ApiParam(value = "", required = true) @Valid @RequestBody
          Mono<CreatePostRequest> createPostRequest,
      @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange) {
    Mono<Void> result = Mono.empty();
    exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
    return result.then(Mono.empty());
  }

  /**
   * DELETE /posts/{postId} : delete post delete a post
   *
   * @param postId post ID (required)
   * @return no content (status code 204)
   */
  @ApiOperation(
      value = "delete post",
      nickname = "deletePost",
      notes = "delete a post",
      authorizations = {
        @Authorization(
            value = "auth0",
            scopes = {
              @AuthorizationScope(scope = "posts:l:w", description = "modify own posts"),
              @AuthorizationScope(scope = "posts:g:w", description = "modify all posts")
            })
      },
      tags = {
        "posts",
      })
  @ApiResponses(value = {@ApiResponse(code = 204, message = "no content")})
  @RequestMapping(method = RequestMethod.DELETE, value = "/posts/{postId}")
  default Mono<ResponseEntity<Void>> deletePost(
      @ApiParam(value = "post ID", required = true) @PathVariable("postId") UUID postId,
      @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange) {
    Mono<Void> result = Mono.empty();
    exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
    return result.then(Mono.empty());
  }

  /**
   * GET /posts/{postId} : get post get post
   *
   * @param postId post ID (required)
   * @return a post (status code 200)
   */
  @ApiOperation(
      value = "get post",
      nickname = "getPost",
      notes = "get post",
      response = Post.class,
      tags = {
        "posts",
      })
  @ApiResponses(value = {@ApiResponse(code = 200, message = "a post", response = Post.class)})
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/posts/{postId}",
      produces = {"application/json"})
  default Mono<ResponseEntity<Post>> getPost(
      @ApiParam(value = "post ID", required = true) @PathVariable("postId") UUID postId,
      @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange) {
    Mono<Void> result = Mono.empty();
    exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
    for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
      if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
        String exampleString = "null";
        result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
        break;
      }
    }
    return result.then(Mono.empty());
  }

  /**
   * GET /posts : get posts get posts
   *
   * @param page page offset (optional)
   * @param size page size (optional)
   * @param query query (optional)
   * @return a paged list of users (status code 200)
   */
  @ApiOperation(
      value = "get posts",
      nickname = "getPosts",
      notes = "get posts",
      response = ListPostsResponse.class,
      tags = {
        "posts",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 200,
            message = "a paged list of users",
            response = ListPostsResponse.class)
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/posts",
      produces = {"application/json"})
  default Mono<ResponseEntity<ListPostsResponse>> getPosts(
      @ApiParam(value = "page offset") @Valid @RequestParam(value = "page", required = false)
          Optional<@Min(0L) Long> page,
      @ApiParam(value = "page size") @Valid @RequestParam(value = "size", required = false)
          Optional<@Min(0L) @Max(100L) Long> size,
      @ApiParam(value = "query") @Valid @RequestParam(value = "query", required = false)
          Optional<@Size(min = 1) String> query,
      @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange) {
    Mono<Void> result = Mono.empty();
    exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
    for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
      if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
        String exampleString =
            "{ \"pageCount\" : 1, \"nextPage\" : 1, \"postSummaries\" : [ { \"summary\" : \"Configure firewall, Pihole, WireGuard and other services on DD-WRT\", \"imageUrl\" : \"https://optimistic.ninja/logo.png\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"Harden your router with DD-WRT\" }, { \"summary\" : \"Configure firewall, Pihole, WireGuard and other services on DD-WRT\", \"imageUrl\" : \"https://optimistic.ninja/logo.png\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"Harden your router with DD-WRT\" } ] }";
        result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
        break;
      }
    }
    return result.then(Mono.empty());
  }

  /**
   * PATCH /posts/{postId} : update post update a pser
   *
   * @param postId post ID (required)
   * @param updatePostRequest (required)
   * @return no content (status code 204) or bad request (status code 400) or unauthorized (status
   *     code 401) or forbidden (status code 403)
   */
  @ApiOperation(
      value = "update post",
      nickname = "updatePost",
      notes = "update a pser",
      authorizations = {
        @Authorization(
            value = "auth0",
            scopes = {
              @AuthorizationScope(scope = "posts:l:w", description = "modify own posts"),
              @AuthorizationScope(scope = "posts:g:w", description = "modify all posts")
            })
      },
      tags = {
        "posts",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 204, message = "no content"),
        @ApiResponse(code = 400, message = "bad request"),
        @ApiResponse(code = 401, message = "unauthorized"),
        @ApiResponse(code = 403, message = "forbidden")
      })
  @RequestMapping(
      method = RequestMethod.PATCH,
      value = "/posts/{postId}",
      consumes = {"application/json"})
  default Mono<ResponseEntity<Void>> updatePost(
      @ApiParam(value = "post ID", required = true) @PathVariable("postId") UUID postId,
      @ApiParam(value = "", required = true) @Valid @RequestBody
          Mono<UpdatePostRequest> updatePostRequest,
      @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange) {
    Mono<Void> result = Mono.empty();
    exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
    return result.then(Mono.empty());
  }
}
